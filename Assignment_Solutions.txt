Assignment – 1 
1. First, we need to setup WebDriverIO for Mobile Testing 
npm install -g appium 
npm init -y 
npm install –save -dev @wdio/cli appium 
npx wdio config 
2. Writing the automation scripts 
describe('Native Demo App Test', () => {  
const formPage = { 
formNavButton: '//android.widget.Button[@content-desc="Forms"]',  
inputField: '//*[@content-desc="text-input"]',  
switchField: '//*[@content-desc="switch"]',  
dropdown: '//*[@content-desc="Dropdown"]',  
activeButton: '//android.widget.Button[@content-desc="button-Active"]',  
submitButton: '//*[@content-desc="button-Active"]',  
inputResult: '//*[@content-desc="input-text-result"]', 
}; 
it('should login with fingerprint', async () => { 
// Launch the app  
await driver.launchApp();  
// Navigate to the biometric login screen  
const loginButton = await $('//*[@content-desc="Login-Screen"]');  
await loginButton.click(); 
// Simulate fingerprint login (Android)  
await driver.fingerPrint(1);  
// For iOS, use this:  
// await driver.sendBiometricMatch(true);  
// Validate successful login (this might vary based on app behavior)  
const loginStatus = await $('//*[@content-desc="biometric-login-status"]');  
expect(await loginStatus.getText()).toContain('success');  
}); 
it('should fill up a form', async () => {  
// Navigate to the form screen  
await $(formPage.formNavButton).click(); 
// Fill the form input  
await $(formPage.inputField).setValue('Sample input text');  
// Toggle the switch  
const switchElement = await $(formPage.switchField);  
if (!(await switchElement.isSelected())) {  
await switchElement.click(); } 
// Select a value from the dropdown (if needed)  
await $(formPage.dropdown).click();  
const dropdownOption = await $('//*[@text="This app is awesome"]');  
await dropdownOption.click(); 
// Click on active button (or submit button)  
await $(formPage.activeButton).click();  
// Validate the form submission  
const resultText = await $(formPage.inputResult).getText();  
expect(resultText).toEqual('Sample input text');  
});  
}); 
3. Integrating an HTML reporter 
npm install --save-dev @rpii/wdio-html-reporter 
Added html reporter to wdio.conf.js 
reporters: [  
'spec', 
['html', {  
outputDir: './reports/html-reports/', 
f
 ilename: 'report.html',  
reportTitle: 'Test Report',  
showInBrowser: true,  
useOnAfterCommandForScreenshot: true  
}]  
], 

------------------------------


Assignment - 2  
1. Setting up webdriverIO 
npm init -y 
npm install –save -dev @wdio/cli  
npx wdio config 
2. Writing automation scripts 
describe('SauceDemo Web App Test', () => { 
// Define selectors as constants for better reusability  
const loginPage = {  
usernameInput: '#user-name',  
passwordInput: '#password',  
loginButton: '#login-button',  
errorMessage: '.error-message-container',  
productsTitle: '.title',  
cartIcon: '.shopping_cart_badge'  
}; 
const validUser = {  
username: 'standard_user',  
password: 'secret_sauce'  
};  
const invalidUser = {  
username: 'invalid_user',  
password: 'invalid_password'  
}; 
const cartPage = {  
cartItem: '.cart_item',  
checkoutButton: '#checkout',  
f
 irstNameInput: '#first-name',  
lastNameInput: '#last-name',  
postalCodeInput: '#postal-code',  
continueButton: '#continue',  
f
 inishButton: '#finish',  
checkoutCompleteMessage: '.complete-header'  
}; 
const productPage = {  
addToCartButtons: '.btn_inventory',  
inventoryItems: '.inventory_item',  
inventoryName: '.inventory_item_name',  
tShirtProductName: 'T-Shirt'  
}; 
it('should display an error message for invalid login', async () => {  
await browser.url('https://www.saucedemo.com/v1/');  
// Attempt login with invalid credentials  
await $(loginPage.usernameInput).setValue(invalidUser.username);  
await $(loginPage.passwordInput).setValue(invalidUser.password);  
await $(loginPage.loginButton).click();  
// Validate error message  
const errorMessage = await $(loginPage.errorMessage).getText();  
assert.include(errorMessage, 'Username and password do not match', 'Error message not       
displayed for invalid login');  
}); 
it('should login with valid credentials and add T-Shirts to the cart', async () => {  
await browser.url('https://www.saucedemo.com/v1/');  
// Login with valid credentials  
await $(loginPage.usernameInput).setValue(validUser.username);  
await $(loginPage.passwordInput).setValue(validUser.password);  
await $(loginPage.loginButton).click();  
// Validate successful login by checking presence of products page title  
const productsTitle = await $(loginPage.productsTitle).getText();  
assert.strictEqual(productsTitle, 'Products', 'Products page not displayed after valid login'); 
// Add all products with 'T-Shirt' in their title to the cart  
const inventoryItems = await $$(productPage.inventoryItems);  
let tShirtCount = 0;  
for (let item of inventoryItems) {  
const productName = await item.$(productPage.inventoryName).getText();  
if (productName.includes(productPage.tShirtProductName)) {  
await item.$(productPage.addToCartButtons).click();  
tShirtCount++;  
}  
} 
// Validate the number of items in the cart against cart icon badge  
const cartIconCount = await $(loginPage.cartIcon).getText(); 
assert.strictEqual(parseInt(cartIconCount), tShirtCount, 'Number of items in cart does not match 
T-Shirt count');  
// Go to the cart  
await $(loginPage.cartIcon).click();  
// Validate that correct number of items are displayed in the cart  
const cartItems = await $$(cartPage.cartItem);  
assert.strictEqual(cartItems.length, tShirtCount, 'Number of items in cart does not match T-Shirts 
added');  
}); 
it('should check out successfully', async () => {  
// Proceed to checkout  
await $(cartPage.checkoutButton).click();  
// Fill in checkout information  
await $(cartPage.firstNameInput).setValue('John');  
await $(cartPage.lastNameInput).setValue('Doe');  
await $(cartPage.postalCodeInput).setValue('12345');  
await $(cartPage.continueButton).click();  
// Complete the purchase  
await $(cartPage.finishButton).click();  
// Validate the checkout completion message  
const checkoutCompleteMessage = await $(cartPage.checkoutCompleteMessage).getText(); 
assert.strictEqual(checkoutCompleteMessage, 'THANK YOU FOR YOUR ORDER', 'Checkout was 
not successful');  
});  
}); 
 
OR 
Assignment – 2 (2nd approach) 
/// <reference types="Cypress" /> 
 
describe('Automate a site', () => { 
 
    it('login with invalid user and validate error message', () => { 
 
        cy.visit("https://www.saucedemo.com/v1/") 
 
        cy.get("#user-name").type("invalid_username") 
        cy.get("#password").type("invalid_password") 
        cy.get("#login-button").click() 
 
        let expname3 = "Epic sadface: Username and password do not match any user in this 
service" 
 
        cy.get("h3[data-test='error']").then( (x4) => { 
                             
                                let actname3 = x4.text() 
                                assert.equal(actname3,expname3) 
        }) 
 
    }) 
    it('login with valid credential and add 2 products with t-shirt to cart', () => { 
 
        cy.visit("https://www.saucedemo.com/v1/") 
        cy.wait(3000) 
 
        cy.get("#user-name").type("standard_user") 
        cy.get("#password").type("secret_sauce") 
        cy.get("#login-button").click() 
        cy.url().should('contain', 'v1') 
 
        cy.get("div[class='inventory_item']").should('have.length', '6') 
 
        //add to cart and validate the count 
        cy.xpath("//div[3]//div[3]//button[1]").click() 
        cy.xpath("//div[4]//div[3]//button[1]").click() 
 
        cy.get(".fa-layers-counter.shopping_cart_badge").should('have.text', '2') 
 
        //click on cart and checkout button 
        cy.get("svg[role='img']").click() 
        cy.get(".btn_action.checkout_button").click() 
 
        //checkout formalities 
        cy.get("#first-name").type("Sanchit") 
        cy.get("#last-name").type("Bhatnagar") 
        cy.get("#postal-code").type("400001") 
        cy.get("input[value='CONTINUE']").click() 
        cy.get(".btn_action.cart_button").click() 
 
        cy.wait(3000) 
         
        let expname4 = "THANK YOU FOR YOUR ORDER" 
        cy.get(".complete-header").then((y2) => { 
 
                          let actname4 = y2.text() 
                          assert.equal(actname4,expname4) 
        }) 
    }) 
}) 
 
 